// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: category.sql

package storage

import (
	"context"

	"github.com/google/uuid"
)

const createCategory = `-- name: CreateCategory :one
INSERT INTO categories (id,
                        child_of,
                        category_name,
                        image_url,
                        is_active,
                        sort_index)
    VALUES (
            $1,
            $2,
            $3,
            $4,
            $5,
            $6) RETURNING id, child_of, category_name, image_url, is_active, sort_index
`

type CreateCategoryParams struct {
	ID           uuid.UUID
	ChildOf      uuid.NullUUID
	CategoryName string
	ImageUrl     string
	IsActive     bool
	SortIndex    int64
}

func (q *Queries) CreateCategory(ctx context.Context, arg CreateCategoryParams) (Category, error) {
	row := q.queryRow(ctx, q.createCategoryStmt, createCategory,
		arg.ID,
		arg.ChildOf,
		arg.CategoryName,
		arg.ImageUrl,
		arg.IsActive,
		arg.SortIndex,
	)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.ChildOf,
		&i.CategoryName,
		&i.ImageUrl,
		&i.IsActive,
		&i.SortIndex,
	)
	return i, err
}

const deleteCategory = `-- name: DeleteCategory :exec
DELETE FROM categories
WHERE id = $1
`

func (q *Queries) DeleteCategory(ctx context.Context, id uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteCategoryStmt, deleteCategory, id)
	return err
}

const getCategoriesWithCountByParentID = `-- name: GetCategoriesWithCountByParentID :many
SELECT c.id, c.child_of, c.category_name, c.image_url, c.is_active, c.sort_index, (SELECT count(*) FROM categories WHERE child_of = c.id and is_active = true) as child_count FROM categories c
WHERE c.child_of = $1 and is_active = true
ORDER BY c.sort_index
`

type GetCategoriesWithCountByParentIDRow struct {
	ID           uuid.UUID
	ChildOf      uuid.NullUUID
	CategoryName string
	ImageUrl     string
	IsActive     bool
	SortIndex    int64
	ChildCount   int64
}

func (q *Queries) GetCategoriesWithCountByParentID(ctx context.Context, parentID uuid.NullUUID) ([]GetCategoriesWithCountByParentIDRow, error) {
	rows, err := q.query(ctx, q.getCategoriesWithCountByParentIDStmt, getCategoriesWithCountByParentID, parentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCategoriesWithCountByParentIDRow
	for rows.Next() {
		var i GetCategoriesWithCountByParentIDRow
		if err := rows.Scan(
			&i.ID,
			&i.ChildOf,
			&i.CategoryName,
			&i.ImageUrl,
			&i.IsActive,
			&i.SortIndex,
			&i.ChildCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCategoryByID = `-- name: GetCategoryByID :one
SELECT id, child_of, category_name, image_url, is_active, sort_index FROM categories
WHERE id = $1
`

func (q *Queries) GetCategoryByID(ctx context.Context, id uuid.UUID) (Category, error) {
	row := q.queryRow(ctx, q.getCategoryByIDStmt, getCategoryByID, id)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.ChildOf,
		&i.CategoryName,
		&i.ImageUrl,
		&i.IsActive,
		&i.SortIndex,
	)
	return i, err
}

const getParentCategoriesWithCount = `-- name: GetParentCategoriesWithCount :many
SELECT c.id, c.child_of, c.category_name, c.image_url, c.is_active, c.sort_index, (SELECT count(*) FROM categories WHERE child_of = c.id and is_active = true) as child_count FROM categories c
WHERE c.child_of is null and is_active = true
ORDER BY c.sort_index
`

type GetParentCategoriesWithCountRow struct {
	ID           uuid.UUID
	ChildOf      uuid.NullUUID
	CategoryName string
	ImageUrl     string
	IsActive     bool
	SortIndex    int64
	ChildCount   int64
}

func (q *Queries) GetParentCategoriesWithCount(ctx context.Context) ([]GetParentCategoriesWithCountRow, error) {
	rows, err := q.query(ctx, q.getParentCategoriesWithCountStmt, getParentCategoriesWithCount)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetParentCategoriesWithCountRow
	for rows.Next() {
		var i GetParentCategoriesWithCountRow
		if err := rows.Scan(
			&i.ID,
			&i.ChildOf,
			&i.CategoryName,
			&i.ImageUrl,
			&i.IsActive,
			&i.SortIndex,
			&i.ChildCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCategories = `-- name: ListCategories :many
SELECT id, child_of, category_name, image_url, is_active, sort_index FROM categories
ORDER BY sort_index
`

func (q *Queries) ListCategories(ctx context.Context) ([]Category, error) {
	rows, err := q.query(ctx, q.listCategoriesStmt, listCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Category
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.ChildOf,
			&i.CategoryName,
			&i.ImageUrl,
			&i.IsActive,
			&i.SortIndex,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCategory = `-- name: UpdateCategory :one
UPDATE categories
    SET child_of = $1,
        category_name = $2,
        image_url = $3,
        is_active = $4,
        sort_index = $5
    WHERE id = $6 RETURNING id, child_of, category_name, image_url, is_active, sort_index
`

type UpdateCategoryParams struct {
	ChildOf      uuid.NullUUID
	CategoryName string
	ImageUrl     string
	IsActive     bool
	SortIndex    int64
	ID           uuid.UUID
}

func (q *Queries) UpdateCategory(ctx context.Context, arg UpdateCategoryParams) (Category, error) {
	row := q.queryRow(ctx, q.updateCategoryStmt, updateCategory,
		arg.ChildOf,
		arg.CategoryName,
		arg.ImageUrl,
		arg.IsActive,
		arg.SortIndex,
		arg.ID,
	)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.ChildOf,
		&i.CategoryName,
		&i.ImageUrl,
		&i.IsActive,
		&i.SortIndex,
	)
	return i, err
}
